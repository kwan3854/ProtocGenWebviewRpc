// AUTO-GENERATED by protoc-gen-webviewrpc
// (C) "Server" side: Base class + static binder

// 메서드별 인코딩 함수를 가져옴
// Get encoding/decoding functions for each method
import { {{range .Methods}}decode{{.InputType}}, encode{{.OutputType}},{{end}} } from './{{.ServiceName}}.js';

/**
 * 추상 클래스 (C#의 {{.ServiceName}}Base)
 * 사용자(서버구현자)는 이 클래스를 상속해서 실제 로직을 override한다.
 * Abstract class (like C#'s {{.ServiceName}}Base)
 * Users (server implementors) should inherit this class and override the methods.
 */
export class {{.ServiceName}}Base {
  {{range .Methods}}
  {{.MethodName}}(requestObj) {
    // requestObj = JS object (이미 decode된)
    // requestObj = JS object (already decoded)
    throw new Error("{{.MethodName}} not implemented");
  }
  {{end}}
}

/**
 * static BindService, (C#의 {{.ServiceName}}.BindService(impl))
 * - impl: {{.ServiceName}}Base implementation
 * - return: ServiceDefinition(methodHandlers)
 */
export class {{.ServiceName}} {
  static bindService(impl) {
    const def = {
      methodHandlers: {}
    };

    {{range .Methods}}
    def.methodHandlers["{{$.ServiceName}}.{{.MethodName}}"] = (reqBytes) => {
      // 1) decode reqBytes => requestObj
      const reqObj = decode{{.InputType}}(reqBytes);
      // 2) call impl.{{.MethodName}}(reqObj)
      const resObj = impl.{{.MethodName}}(reqObj);
      // 3) encode resObj => Uint8Array
      const resBytes = encode{{.OutputType}}(resObj);
      return resBytes;
    };
    {{end}}

    return def;
  }
}
