// AUTO-GENERATED by protoc-gen-webviewrpc
// JavaScript Server: {{.ServiceName}}ServiceBase

// 메서드별 인코딩 함수를 가져옴
// Get encoding/decoding functions for each method
import { {{range .Methods}}decode{{.InputType}}, encode{{.OutputType}},{{end}} } from './{{.ServiceName}}.js';

/**
 * 추상 클래스 (C#의 {{.ServiceName}}Base)
 * 사용자(서버구현자)는 이 클래스를 상속해서 실제 로직을 override한다.
 * Abstract class (like C#'s {{.ServiceName}}Base)
 * Users (server implementors) should inherit this class and override the methods.
 */
export class {{.ServiceName}}Base {
  {{range .Methods}}
  /**
   * async {{.MethodName}}
   * @param { {{.InputType}} } requestObj
   * @returns {Promise< {{.OutputType}} >}
   */
  async {{.MethodName}}(requestObj) {
    throw new Error("Method {{.MethodName}} must be implemented");
  }
  {{end}}
}

/**
 * static BindService, (C#의 {{.ServiceName}}.BindService(impl))
 * - impl: {{.ServiceName}}Base implementation
 * - return: ServiceDefinition(methodHandlers)
 */
export class {{.ServiceName}} {
  static bindService(impl) {
    const def = {
      methodHandlers: {}
    };

    {{range .Methods}}
    def.methodHandlers["{{$.ServiceName}}.{{.MethodName}}"] = async (reqBytes) => {
      const reqObj = decode{{.InputType}}(reqBytes);
      const respObj = await impl.{{.MethodName}}(reqObj);
      return encode{{.OutputType}}(respObj);
    };
    {{end}}

    return def;
  }
}
